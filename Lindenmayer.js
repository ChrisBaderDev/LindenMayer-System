/**
 * @author Christoph Bader
 * @date 25.01.2023
 *
 * This sketch uses Lindenmayer-Systems (L-Systems) to portray various recursive structures.
 * A L-System consists of 3 main parts:
 *
 *      1. A set of symbols (e.g.: [A,B,C], [+,-,*])
 *      2. A set of rules (e.g.: A => AB, + => -*)
 *      3. An axiom (e.g.: ABABC)
 *
 * The recursive structure will be generated by starting with the axiom (also called "Generation 0"), and
 * change depending on the given set of rules. These changes are called generations. Here's a quick example:
 *
 *      L-System = {[Symbols], [Rules], axiom}
 *               = {[A,B,C], [A => AB, B => BC, C => AC], A}
 *
 * The generations would then look as follows:
 *      Generation 0: A
 *      Generation 1: AB
 *      Generation 2: ABBC
 *      Generation 3: ABBCBCAC
 *      Generation 4: ....
 *
 * This allows to create complex patterns from a simple set of rules. This program contains examples of different 2D L-Systems.
 *
 */

let lSystem;
let interpreter;
let currentFunction;
let backgroundImg;
let structures = [];
let meaningFunctions = [];
let interpreters = [];

/**
 * The setup function allows to set P5.js specific settings.
 */
function setup() {
  // P5.js settings
  createCanvas(1000, 1000);
  frameRate(1);

  //Style
  backgroundImg = loadImage("../Images/paper-background.jpg");
  image(backgroundImg, 0, 0);

  // Setup Systems
  setUpAll();
}

/**
 * The draw function acts as loop that should be called framerate per second times.
 */
function draw() {
  image(backgroundImg, 0, 0, width, height);
  for (let j = 0; j < interpreters.length; j++) {
    interpreters[j].interpret();
  }
  if (frameCount % 6 == 0) {
    setUpAll();
    setTimeout(() => {
      console.log("Round completetd!");
    }, 2500);
  }
}

function setUpAll() {
  setUpSystems();
  setUpMeaningFunctions();
  setUpInterpreters();
}

function setUpSystems() {
  structures[0] = setUpBranchA();
  structures[1] = setUpBranchB();
  structures[2] = setUpBranchC();
  structures[3] = setUpBranchD();
  structures[4] = setUpBranchE();
  structures[5] = setUpBranchF();
}

function setUpMeaningFunctions() {
  meaningFunctions[0] = meaningFunctionBranchA;
  meaningFunctions[1] = meaningFunctionBranchB;
  meaningFunctions[2] = meaningFunctionBranchC;
  meaningFunctions[3] = meaningFunctionBranchD;
  meaningFunctions[4] = meaningFunctionBranchE;
  meaningFunctions[5] = meaningFunctionBranchF;
}

function setUpInterpreters() {
  interpreters[0] = new LInterpreter(structures[0], meaningFunctions[0]);
  interpreters[1] = new LInterpreter(structures[1], meaningFunctions[1]);
  interpreters[2] = new LInterpreter(structures[2], meaningFunctions[2]);
  interpreters[3] = new LInterpreter(structures[3], meaningFunctions[3]);
  interpreters[4] = new LInterpreter(structures[4], meaningFunctions[4]);
  interpreters[5] = new LInterpreter(structures[5], meaningFunctions[5]);

  // Add one extra evolution
  interpreters[3].interpret();
  interpreters[4].interpret();
  interpreters[5].interpret();
}
